# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18mUcfpY3HcDu6ZebmpxnFr2yzBUm2r66
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset
df = pd.read_csv('StudentsPerformance.csv')

# Create target column: 1 for pass, 0 for fail
df['pass_fail'] = ((df['math score'] >= 40) & (df['reading score'] >= 40) & (df['writing score'] >= 40)).astype(int)

# Encode categorical features using separate label encoders per column
label_encoders = {}
for col in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le  # save for later use

# Features and labels
X = df.drop(['math score', 'reading score', 'writing score', 'pass_fail'], axis=1)
y = df['pass_fail']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Predict function using same encoders
def predict_pass_fail(raw_input_dict):
    encoded_input = {}
    for key in raw_input_dict:
        if key in label_encoders:
            encoded_input[key] = label_encoders[key].transform([raw_input_dict[key]])[0]
        else:
            encoded_input[key] = raw_input_dict[key]
    input_df = pd.DataFrame([encoded_input])
    prediction = model.predict(input_df)
    return "Pass ✅" if prediction[0] == 1 else "Fail ❌"

# Sample prediction
sample = {
    'gender': 'female',
    'race/ethnicity': 'group B',
    'parental level of education': "bachelor's degree",
    'lunch': 'standard',
    'test preparation course': 'completed'
}

print("\nPrediction for Sample Student:", predict_pass_fail(sample))

import matplotlib.pyplot as plt
import seaborn as sns

# Use the original DataFrame before encoding for visualization
df_viz = pd.read_csv('StudentsPerformance.csv')

# Add pass/fail column again
df_viz['pass_fail'] = ((df_viz['math score'] >= 40) &
                       (df_viz['reading score'] >= 40) &
                       (df_viz['writing score'] >= 40)).map({1: "Pass", 0: "Fail"})

# Pass/Fail Count Plot
plt.figure(figsize=(6,4))
sns.countplot(data=df_viz, x='pass_fail', palette='Set2')
plt.title("Pass vs Fail Count")
plt.xlabel("Result")
plt.ylabel("Number of Students")
plt.tight_layout()
plt.show()

# Gender vs Pass/Fail
plt.figure(figsize=(6,4))
sns.countplot(data=df_viz, x='gender', hue='pass_fail', palette='coolwarm')
plt.title("Gender-wise Pass/Fail")
plt.xlabel("Gender")
plt.ylabel("Number of Students")
plt.legend(title="Result")
plt.tight_layout()
plt.show()

# Parental Education vs Average Total Score
df_viz['average_score'] = (df_viz['math score'] + df_viz['reading score'] + df_viz['writing score']) / 3

plt.figure(figsize=(10,5))
sns.barplot(data=df_viz, x='parental level of education', y='average_score', palette='viridis')
plt.xticks(rotation=45)
plt.title("Parental Education vs Student Average Score")
plt.xlabel("Parental Education")
plt.ylabel("Average Score")
plt.tight_layout()
plt.show()

